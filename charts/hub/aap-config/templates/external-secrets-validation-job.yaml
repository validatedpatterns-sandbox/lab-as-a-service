{{- if not $.Values.validationJob.disabled }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: external-secrets-validation-job
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  parallelism: 1
  completions: 1
  backoffLimit: 3
  activeDeadlineSeconds: {{ $.Values.validationJob.activeDeadlineSeconds | default 300 }}
  template:
    spec:
      restartPolicy: Never
      serviceAccountName: {{ $.Values.serviceAccountName }}
      containers:
      - name: secrets-validator
        image: {{ .Values.configJob.image }}
        imagePullPolicy: {{ $.Values.configJob.imagePullPolicy }}
        command:
        - /bin/bash
        - -c
        - |
          set -euo pipefail
          
          echo "Starting external secrets validation for aap-config namespace..."
          
          # List of external secrets to validate
          EXTERNAL_SECRETS=(
            "aap-manifest"
            "agof-vault-file" 
            "automation-hub-token"
          )
          
          # Function to check if a secret exists and has data
          check_secret() {
            local secret_name=$1
            echo "Checking secret: $secret_name"
            
            # Check if secret exists
            if ! kubectl get secret "$secret_name" -n aap-config >/dev/null 2>&1; then
              echo "ERROR: Secret $secret_name does not exist"
              return 1
            fi
            
            # Check if secret has data
            local data_count=$(kubectl get secret "$secret_name" -n aap-config -o jsonpath='{.data}' | jq -r 'length')
            if [ "$data_count" -eq 0 ]; then
              echo "ERROR: Secret $secret_name exists but has no data"
              return 1
            fi
            
            echo "SUCCESS: Secret $secret_name is populated with $data_count data field(s)"
            return 0
          }
          
          # Function to check external secret status
          check_external_secret_status() {
            local external_secret_name=$1
            echo "Checking ExternalSecret status: $external_secret_name"
            
            # Check if ExternalSecret exists
            if ! kubectl get externalsecret "$external_secret_name" -n aap-config >/dev/null 2>&1; then
              echo "ERROR: ExternalSecret $external_secret_name does not exist"
              return 1
            fi
            
            # Check ExternalSecret status
            local ready_status=$(kubectl get externalsecret "$external_secret_name" -n aap-config -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')
            if [ "$ready_status" != "True" ]; then
              echo "ERROR: ExternalSecret $external_secret_name is not ready. Status: $ready_status"
              # Get more details about the error
              kubectl get externalsecret "$external_secret_name" -n aap-config -o jsonpath='{.status.conditions[?(@.type=="Ready")].message}' | xargs -I {} echo "Message: {}"
              return 1
            fi
            
            echo "SUCCESS: ExternalSecret $external_secret_name is ready"
            return 0
          }
          
          # Wait and validate all external secrets in a loop until all are healthy
          echo "Starting validation loop for external secrets..."
          TIMEOUT={{ .Values.validationJob.activeDeadlineSeconds }}
          START_TIME=$(date +%s)
          WAIT_INTERVAL=10
          
          while true; do
            CURRENT_TIME=$(date +%s)
            ELAPSED=$((CURRENT_TIME - START_TIME))
            
            if [ $ELAPSED -ge $TIMEOUT ]; then
              echo "ERROR: Timeout ($TIMEOUT seconds) reached waiting for external secrets to be healthy"
              exit 1
            fi
            
            echo "=== Validation attempt (${ELAPSED}s/${TIMEOUT}s) ==="
            
            all_healthy=true
            
            # Check each external secret
            for secret in "${EXTERNAL_SECRETS[@]}"; do
              echo "Checking $secret..."
              
              # Check ExternalSecret status
              if ! check_external_secret_status "$secret" >/dev/null 2>&1; then
                echo "‚ö†Ô∏è  ExternalSecret $secret is not ready yet"
                all_healthy=false
                continue
              fi
              
              # Check corresponding Secret
              if ! check_secret "$secret" >/dev/null 2>&1; then
                echo "‚ö†Ô∏è  Secret $secret is not populated yet"
                all_healthy=false
                continue
              fi
              
              echo "‚úÖ $secret is healthy"
            done
            
            if [ "$all_healthy" = true ]; then
              echo ""
              echo "üéâ SUCCESS: All external secrets are healthy!"
              break
            fi
            
            echo ""
            echo "‚è≥ Waiting ${WAIT_INTERVAL} seconds before next check..."
            sleep $WAIT_INTERVAL
          done
          
          echo ""
          echo "=== FINAL VALIDATION SUMMARY ==="
          for secret in "${EXTERNAL_SECRETS[@]}"; do
            echo "‚úÖ $secret: ExternalSecret ready and Secret populated"
          done
        env:
        - name: NAMESPACE
          value: aap-config
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi" 
            cpu: "200m"
{{- end }}{{/* if not $.Values.validationJob.disabled */}}
