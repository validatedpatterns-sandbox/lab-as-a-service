---
- hosts: localhost
  gather_facts: no
  tasks:
  - name: Read helm values
    ansible.builtin.include_vars:
      file: "/pattern-home/helm-values/values.yaml"

  - name: Set variables
    no_log: true
    ansible.builtin.set_fact:
      aap_hostname: "aap-ansible-automation-platform.{{ global.localClusterDomain }}"
      api_prefix: "api/controller/v2"
      admin_password: "{{ lookup('file', '/pattern-home/aap-admin-password/password') }}"
      aap_validate_certs: false
      aap_username: admin
      aap_password: "{{ lookup('file', '/pattern-home/aap-admin-password/password') }}"

  - name: Show AAP hostname
    ansible.builtin.debug:
      msg: "{{ aap_hostname }}"

  - name: Wait for Automation Controller to be up
    ansible.builtin.uri:
      url: "https://{{ aap_hostname }}/{{ api_prefix }}/ping/"
      method: GET
      user: '{{ admin_user | default("admin") }}'
      password: "{{ admin_password }}"
      validate_certs: false
    register: check2
    until: check2.json is defined and check2.json.instances[0].capacity > 0 and check2.json.instance_groups[0].capacity > 0
    retries: 60
    delay: 10

  - name: Display api ping results
    ansible.builtin.debug:
      msg: '{{ check2.json }}'

  - name: Default to entitlement
    ansible.builtin.set_fact:
      entitle_aap: true

  - name: Set manifest content variable
    ansible.builtin.set_fact:
      manifest_content: "{{ lookup('file', '/pattern-home/aap_manifest.zip') | b64encode }}"

  - name: Entitle AAP if needed
    block:
      # AAP will have an empty license_info block if it hasn't been entitled
      # of course we expect to entitle it through the containerized installer
      # But in case we didn't use the containerized installer, we have this check
      # and this block as a failsafe
      - name: Check on current license_info status
        ansible.builtin.uri:
          url: 'https://{{ aap_hostname }}/{{ api_prefix }}/config/'
          method: GET
          user: '{{ admin_user | default("admin") }}'
          password: "{{ admin_password }}"
          validate_certs: false
          force_basic_auth: true
        register: config_check

      - name: Debug license_info status
        ansible.builtin.debug:
          var: config_check

      - name: Turn off entitlement if needed
        ansible.builtin.set_fact:
          entitle_aap: false
        when:
          - config_check.json.license_info.valid_key

    rescue:
      - name: Notify that we are going to entitle
        ansible.builtin.debug:
          msg: "Caught an exception, entitling"

  - name: Post manifest file if needed
    ansible.builtin.uri:
      url: 'https://{{ aap_hostname }}/{{ api_prefix }}/config/'
      method: POST
      user: '{{ admin_user | default("admin") }}'
      password: "{{ admin_password }}"
      body: '{ "eula_accepted": true, "manifest": "{{ manifest_content }}" }'
      body_format: json
      validate_certs: false
      force_basic_auth: true
    when: entitle_aap
    register: license_controller
    until: license_controller is not failed
    retries: 5

  - name: Create a token
    ansible.platform.token:
      gateway_hostname: "{{ aap_hostname }}"
      gateway_username: "{{ aap_username }}"
      gateway_password: "{{ aap_password }}"
      validate_certs: false
      description: "Automation token"
    register: user_token

  - name: Store the token as a Kubernetes secret
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: v1
        kind: Secret
        metadata:
          namespace: ansible-automation-platform
          name: aap-login-token
        data:
          token: "{{ user_token.ansible_facts.aap_token.token | ansible.builtin.b64encode }}"
          host: "{{ aap_hostname | ansible.builtin.b64encode }}"
