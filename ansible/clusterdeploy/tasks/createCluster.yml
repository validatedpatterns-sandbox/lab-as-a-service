# Deploy cluster using ACM
- name: "Create {{ cluster.namespace }} namespace"
  kubernetes.core.k8s:
    name: "{{ cluster.namespace }}"
    api_version: v1
    kind: Namespace
    state: present
    
- name: "Create install-config template"
  ansible.builtin.template:
    src: install-config.yaml.j2
    dest: "{{ cluster.name }}-install-config.yaml"

- name: Create install-config secrets
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ cluster.name }}-install-config"
        namespace: "{{ cluster.namespace }}"
      data:
        install-config.yaml: "{{ lookup('file', './{{ cluster.name }}-install-config.yaml') | b64encode }}"

- name: Create pull secret
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ cluster.name }}-pull-secret"
        namespace: "{{ cluster.namespace }}"
      type: kubernetes.io/dockerconfigjson
      data:
        .dockerconfigjson: "{{ lookup('file', '~/.pullsecret.json') | b64encode }}"

- name: Create AWS credentials secret
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'aws-credentials.yaml.j2') | from_yaml }}"

- name: Create clusterDeployment resources
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'clusterDeployment.yaml.j2') | from_yaml }}"

- name: Wait 60 Seconds before moving on
  ansible.builtin.pause:
    seconds: 60

- name: Get cluster deployment object to find the kubeconfig secret name
  kubernetes.core.k8s_info:
    api_version: hive.openshift.io/v1
    kind: ClusterDeployment
    name: "{{ cluster.name }}"
    namespace: "{{ cluster.namespace }}"
  register: cluster_deployment

- name: Define the secret name as a fact for later use
  ansible.builtin.set_fact:
    admin_secret_name: "{{ cluster_deployment.resources[0].spec.clusterMetadata.adminKubeconfigSecretRef.name }}"
  
- name: Get the secret containing the kubeconfig
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ admin_secret_name }}"
    namespace: "{{ cluster.namespace }}"
  register: admin_secret_info

- name: Decode and save kubeconfig to file
  ansible.builtin.copy:
    content: "{{ admin_secret_info.resources[0].data.kubeconfig | b64decode }}"
    dest: ./kubeconfig
    mode: '0600'

- name: Create an import secret using the kubeconfig
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: auto-import-secret
        namespace: "{{ cluster.namespace }}"
      type: Opaque
      data:
        kubeconfig: "{{ lookup('file', './kubeconfig') | b64encode }}"
  register: auto_import_secret

- name: Create managecluster resource
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'managedCluster.yaml.j2') | from_yaml }}"

- name: Create klusterletAddOnConfig
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'klusterletAddOnConfig.yaml.j2') | from_yaml }}"
        
#- name: Create machinePool resources
#  kubernetes.core.k8s:
#    state: present
#    definition: "{{ lookup('template', 'machinepool.yaml.j2') | from_yaml }}"
#
#- name: Create klusterAddOns manifest
#  kubernetes.core.k8s:
#    state: present
#    definition: "{{ lookup('template', 'klusterletAddOnConfig.yaml.j2') | from_yaml }}"
